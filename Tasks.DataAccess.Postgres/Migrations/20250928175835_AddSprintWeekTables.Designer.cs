// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tasks.DataAccess.Postgres;

#nullable disable

namespace Tasks.DataAccess.Postgres.Migrations
{
    [DbContext(typeof(TaskDbContext))]
    [Migration("20250928175835_AddSprintWeekTables")]
    partial class AddSprintWeekTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tasks.Domain.Entities.FieldActivityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("FieldActivities", (string)null);
                });

            modelBuilder.Entity("Tasks.Domain.Entities.SprintEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Tasks.Domain.Entities.SprintEntity.Description#SprintDescription", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Tasks.Domain.Entities.SprintEntity.Name#SprintName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "Tasks.Domain.Entities.SprintEntity.Status#SprintStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StatusDescription");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("StatusName");
                        });

                    b.HasKey("Id");

                    b.ToTable("Sprints", (string)null);
                });

            modelBuilder.Entity("Tasks.Domain.Entities.SprintFieldActivityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("FieldActivityId")
                        .HasColumnType("bigint");

                    b.Property<long>("SprintId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FieldActivityId");

                    b.HasIndex("SprintId");

                    b.ToTable("Sprint_FieldActivities", (string)null);
                });

            modelBuilder.Entity("Tasks.Domain.Entities.SprintWeekEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("SprintId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("SprintWeeks", (string)null);
                });

            modelBuilder.Entity("Tasks.Domain.Entities.TargetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("SprintId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Tasks.Domain.Entities.TargetEntity.Name#TargetName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");
                        });

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("Targets", (string)null);
                });

            modelBuilder.Entity("Tasks.Domain.Entities.TaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeekId")
                        .HasColumnType("bigint");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Tasks.Domain.Entities.TaskEntity.Description#TaskDescription", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Tasks.Domain.Entities.TaskEntity.Name#TaskName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "Tasks.Domain.Entities.TaskEntity.Status#TasksStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Status");
                        });

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.HasIndex("WeekId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("Tasks.Domain.Entities.SprintFieldActivityEntity", b =>
                {
                    b.HasOne("Tasks.Domain.Entities.FieldActivityEntity", "FieldActivity")
                        .WithMany()
                        .HasForeignKey("FieldActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tasks.Domain.Entities.SprintEntity", "Sprint")
                        .WithMany("SprintFieldActivities")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldActivity");

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("Tasks.Domain.Entities.SprintWeekEntity", b =>
                {
                    b.HasOne("Tasks.Domain.Entities.SprintEntity", "Sprint")
                        .WithMany("SprintWeeks")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("Tasks.Domain.Entities.TargetEntity", b =>
                {
                    b.HasOne("Tasks.Domain.Entities.SprintEntity", "Sprint")
                        .WithMany("Targets")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("Tasks.Domain.Entities.TaskEntity", b =>
                {
                    b.HasOne("Tasks.Domain.Entities.TargetEntity", "Target")
                        .WithMany("Tasks")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tasks.Domain.Entities.SprintWeekEntity", "Week")
                        .WithMany("Tasks")
                        .HasForeignKey("WeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Target");

                    b.Navigation("Week");
                });

            modelBuilder.Entity("Tasks.Domain.Entities.SprintEntity", b =>
                {
                    b.Navigation("SprintFieldActivities");

                    b.Navigation("SprintWeeks");

                    b.Navigation("Targets");
                });

            modelBuilder.Entity("Tasks.Domain.Entities.SprintWeekEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Tasks.Domain.Entities.TargetEntity", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
